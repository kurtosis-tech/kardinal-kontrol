# Our desired pipeline using only a Nix shell environment
name: Check and build Kardinal

permissions:
  id-token: write
  contents: read

on:
  push:
    branches:
      - "*"
    tags:
      - "*"
  pull_request:
    branches:
      - main

jobs:
  e2e_tests:
    name: E2E tests
    runs-on: ubuntu-22.04
    steps:
      - name: Git checkout
        uses: actions/checkout@v3
      
      - name: Install Nix
        uses: cachix/install-nix-action@v27
        # relax sandbox due impure kontrol-service tests during build
        with:
          extra_nix_config: |
            sandbox = relaxed

      - name: Magic cache
        uses: DeterminateSystems/magic-nix-cache-action@v7

      - name: Build and load kontrol service image
        run: | 
          docker load < $(nix build ./#kontrol-service-container --no-link --print-out-paths)

      - name: Start kontrol service and Postgres 
        run: |
          docker version
          docker compose -f docker-compose.yml up -d
          docker ps

      - name: Wait for docker network to be ready
        run: sleep 10s
        shell: bash

      - name: Install CLI 
        run: curl get.kardinal.dev -sL | sh
      
      - name: Verify kardinal command
        run: bash -c 'source ~/.bashrc; if kardinal | grep -q "Kardinal CLI"; then exit 0; else exit 1; fi'

      - name: Retrieve the tenant UUID
        id: tenant
        run: |
          tenant_id=$(kardinal tenant show)
          echo "id=${tenant_id}" >> "$GITHUB_OUTPUT"

      - name: Deploy boutique demo manifest
        run: |
          KARDINAL_CLI_DEV_MODE=TRUE kardinal deploy -k obd-demo.yaml
          tenant_id=${{ steps.tenant.outputs.id }}
          deployments=$(curl http://localhost:8080/tenant/${tenant_id}/cluster-resources | jq -r '.deployments[].metadata.name' | tr " " "\n" | sort -g | tr "\n" " ")
          echo ${deployments}
          if [ "${deployments}" != "cartservice-prod frontend-prod postgres-prod productcatalogservice-prod" ]; then exit 1; fi

      - name: Create, validate and delete flow
        run: |
          KARDINAL_CLI_DEV_MODE=TRUE kardinal flow create frontend kurtosistech/frontend:demo-frontend > kardinal.out
          flow_id=$(grep "Flow.*created" kardinal.out | cut -d ' ' -f2 | tr -d "\"")
          tenant_id=${{ steps.tenant.outputs.id }}
          deployments=$(curl http://localhost:8080/tenant/${tenant_id}/cluster-resources | jq -r '.deployments[].metadata.name' | tr " " "\n" | sort -g | tr "\n" " ")
          echo ${deployments}
          if [ "${deployments}" != "cartservice-prod frontend-dev frontend-prod postgres-prod productcatalogservice-prod" ]; then exit 1; fi
          kardinal flow delete ${flow_id}

      - name: Create, validate and delete a more complex flow
        run: |
          KARDINAL_CLI_DEV_MODE=TRUE kardinal flow create frontend kurtosistech/frontend:demo-on-sale -s productcatalogservice=kurtosistech/productcatalogservice:demo-on-sale > kardinal.out
          flow_id=$(grep "Flow.*created" kardinal.out | cut -d ' ' -f2 | tr -d "\"")
          tenant_id=${{ steps.tenant.outputs.id }}
          deployments=$(curl http://localhost:8080/tenant/${tenant_id}/cluster-resources | jq -r '.deployments[].metadata.name' | tr " " "\n" | sort -g | tr "\n" " ")
          echo ${deployments}
          if [ "${deployments}" != "cartservice-prod frontend-dev frontend-prod postgres-prod productcatalogservice-prod" ]; then exit 1; fi
          kardinal flow delete ${flow_id}
