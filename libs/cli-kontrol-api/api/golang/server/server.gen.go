// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version 2.1.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	. "github.com/kurtosis-tech/kardinal/libs/cli-kontrol-api/api/golang/types"
	"github.com/labstack/echo/v4"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /deploy)
	PostDeploy(ctx echo.Context) error

	// (POST /flow/create)
	PostFlowCreate(ctx echo.Context) error

	// (POST /flow/delete)
	PostFlowDelete(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostDeploy converts echo context to params.
func (w *ServerInterfaceWrapper) PostDeploy(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostDeploy(ctx)
	return err
}

// PostFlowCreate converts echo context to params.
func (w *ServerInterfaceWrapper) PostFlowCreate(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostFlowCreate(ctx)
	return err
}

// PostFlowDelete converts echo context to params.
func (w *ServerInterfaceWrapper) PostFlowDelete(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostFlowDelete(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/deploy", wrapper.PostDeploy)
	router.POST(baseURL+"/flow/create", wrapper.PostFlowCreate)
	router.POST(baseURL+"/flow/delete", wrapper.PostFlowDelete)

}

type PostDeployRequestObject struct {
	Body *PostDeployJSONRequestBody
}

type PostDeployResponseObject interface {
	VisitPostDeployResponse(w http.ResponseWriter) error
}

type PostDeploy200JSONResponse string

func (response PostDeploy200JSONResponse) VisitPostDeployResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostFlowCreateRequestObject struct {
	Body *PostFlowCreateJSONRequestBody
}

type PostFlowCreateResponseObject interface {
	VisitPostFlowCreateResponse(w http.ResponseWriter) error
}

type PostFlowCreate200JSONResponse string

func (response PostFlowCreate200JSONResponse) VisitPostFlowCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostFlowDeleteRequestObject struct {
	Body *PostFlowDeleteJSONRequestBody
}

type PostFlowDeleteResponseObject interface {
	VisitPostFlowDeleteResponse(w http.ResponseWriter) error
}

type PostFlowDelete200JSONResponse string

func (response PostFlowDelete200JSONResponse) VisitPostFlowDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (POST /deploy)
	PostDeploy(ctx context.Context, request PostDeployRequestObject) (PostDeployResponseObject, error)

	// (POST /flow/create)
	PostFlowCreate(ctx context.Context, request PostFlowCreateRequestObject) (PostFlowCreateResponseObject, error)

	// (POST /flow/delete)
	PostFlowDelete(ctx context.Context, request PostFlowDeleteRequestObject) (PostFlowDeleteResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// PostDeploy operation middleware
func (sh *strictHandler) PostDeploy(ctx echo.Context) error {
	var request PostDeployRequestObject

	var body PostDeployJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostDeploy(ctx.Request().Context(), request.(PostDeployRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostDeploy")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostDeployResponseObject); ok {
		return validResponse.VisitPostDeployResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostFlowCreate operation middleware
func (sh *strictHandler) PostFlowCreate(ctx echo.Context) error {
	var request PostFlowCreateRequestObject

	var body PostFlowCreateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostFlowCreate(ctx.Request().Context(), request.(PostFlowCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostFlowCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostFlowCreateResponseObject); ok {
		return validResponse.VisitPostFlowCreateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostFlowDelete operation middleware
func (sh *strictHandler) PostFlowDelete(ctx echo.Context) error {
	var request PostFlowDeleteRequestObject

	var body PostFlowDeleteJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostFlowDelete(ctx.Request().Context(), request.(PostFlowDeleteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostFlowDelete")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostFlowDeleteResponseObject); ok {
		return validResponse.VisitPostFlowDeleteResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RUQW/bPAz9KwK/77ABdpxtN9+2BgOC7hCgv0CRGEetLGoUnTYo/N8HyW7SrcGwHYZ1",
	"N4nkE997ovQIhvpIAYMkaB8hmT32uixXePjs6f4mosnbyBSRxWFJWjJ3yHUBJ8wRJ9iX1EPdUS3HiNDC",
	"nF/cIB+cwSsKO9dBda6pXR+JJeOC7p9BoIKoZQ8tdE72w3ZhqG/mXJ0imtOmoyaflGAcK5j7amZ9hLEC",
	"1+sOa09GC3Hugg+6jz7XbLW5w2Br3XotmARO6CTsQpfhaeJdT9wuoZ8q9Ev4mQ5tb9FIPnDDZP91V1/q",
	"yiEXdpQbipNi0NWXdXPtabD1NQVh8urjZg0VHJCTowAtvFssF8tsCkUMOjpo4UMJTSSL7MZi9HQsVlEq",
	"irJhWhyFtYUWNpRkNdVUwPh1wCSfyBaEoSAYCkjH6J0psOY25fZPs55X/zPuoIX/mvNjaOaX0Hx3Y0Wp",
	"xWTYRZlUTM2VVpHJKgr+qIwfkiDPhByjhVZ4wDEHUqSQput+v1z+Fs0f5+sCl4PaebpXhrEcopJoGfIl",
	"5uIm55qSw587mgVfTXV/xtXnn8sFIVNvpZWdFb1SLy16/BUvV1Pd35rQ3PxkpXrDeEAWlb8wJXQe3Lev",
	"zOVx/BYAAP//ZYILE58GAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
