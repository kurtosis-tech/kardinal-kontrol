/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/cluster-resources/{identifier}": {
    /** Cluster resource definition */
    get: {
      parameters: {
        path: {
          identifier: components["parameters"]["identifier"];
        };
      };
      responses: {
        /** @description Successful response */
        200: {
          content: {
            "application/json": components["schemas"]["ClusterResource"];
          };
        };
        default: components["responses"]["NotOk"];
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    ResponseInfo: {
      type: components["schemas"]["ResponseType"];
      message: string;
      /** Format: uint32 */
      code: number;
    };
    /** @enum {string} */
    ResponseType: "ERROR" | "INFO" | "WARNING";
    ClusterResource: {
      services?: components["schemas"]["Service"][];
      deployments?: components["schemas"]["Deployment"][];
      virtual_services?: components["schemas"]["VirtualService"][];
      destination_rules?: components["schemas"]["DestinationRule"][];
      gateway?: components["schemas"]["Gateway"];
    };
    Service: {
      /** @example Service */
      kind?: string;
      /** @example v1 */
      api_version?: string;
      metadata?: components["schemas"]["Metadata"];
      spec?: components["schemas"]["ServiceSpec"];
      status?: components["schemas"]["ServiceStatus"];
    };
    Metadata: {
      name?: string;
      namespace?: string;
      /** Format: date-time */
      creation_time_stamp?: string;
      /**
       * @example {
       *   "app": "app-name"
       * }
       */
      labels?: {
        [key: string]: string;
      };
      /**
       * @example {
       *   "sidecar.istio.io/inject": true
       * }
       */
      annotations?: {
        [key: string]: string;
      };
    };
    ServiceSpec: {
      ports?: components["schemas"]["Port"][];
      /**
       * @example {
       *   "app": "app-name"
       * }
       */
      selector?: {
        [key: string]: string;
      };
    };
    Port: {
      name?: string;
      protocol?: string;
      port?: number;
      targetPort?: number;
    };
    ServerPort: {
      name?: string;
      number?: number;
      protocol?: string;
    };
    ServiceStatus: {
      load_balancer?: Record<string, never>;
    };
    Deployment: {
      /** @example Deployment */
      kind?: string;
      /** @example v1 */
      api_version?: string;
      metadata?: components["schemas"]["Metadata"];
      spec?: components["schemas"]["DeploymentSpec"];
      status?: Record<string, never>;
    };
    DeploymentSpec: {
      replicas?: number;
      selector?: {
        /**
         * @example {
         *   "app": "app-name"
         * }
         */
        match_labels?: {
          [key: string]: string;
        };
      };
      template?: components["schemas"]["PodTemplateSpec"];
      strategy?: components["schemas"]["DeploymentStrategy"];
    };
    PodTemplateSpec: {
      metadata?: components["schemas"]["Metadata"];
      spec?: components["schemas"]["PodSpec"];
    };
    PodSpec: {
      containers?: components["schemas"]["Container"][];
    };
    Container: {
      name?: string;
      image?: string;
      ports?: components["schemas"]["ContainerPort"][];
      env?: components["schemas"]["EnvVar"][];
      resources?: Record<string, never>;
      image_pull_policy?: string;
    };
    ContainerPort: {
      name?: string;
      container_port?: number;
      protocol?: string;
    };
    /**
     * @example {
     *   "name": "REDIS",
     *   "value": "redis-prod"
     * }
     */
    EnvVar: {
      [key: string]: string;
    };
    DeploymentStrategy: {
      type?: string;
      rolling_update?: components["schemas"]["RollingUpdateStrategy"];
    };
    RollingUpdateStrategy: {
      /** @example 25% */
      max_unavailable?: string;
      /** @example 25% */
      max_surge?: string;
    };
    VirtualService: {
      /** @example VirtualService */
      kind?: string;
      /** @example networking.istio.io/v1alpha3 */
      api_version?: string;
      metadata?: components["schemas"]["Metadata"];
      spec?: components["schemas"]["VirtualServiceSpec"];
      status?: Record<string, never>;
    };
    VirtualServiceSpec: {
      hosts?: string[];
      gateways?: string[];
      http?: components["schemas"]["MatchRoute"][];
      tcp?: components["schemas"]["MatchRoute"][];
    };
    MatchRoute: {
      match?: components["schemas"]["MatchData"][];
      route?: components["schemas"]["RouteDestination"][];
    };
    MatchData: {
      port?: number;
    };
    RouteDestination: {
      destination?: {
        host?: string;
        subset?: string;
      };
      weight?: number;
    };
    DestinationRule: {
      /** @example DestinationRule */
      kind?: string;
      /** @example networking.istio.io/v1alpha3 */
      api_version?: string;
      metadata?: components["schemas"]["Metadata"];
      spec?: components["schemas"]["DestinationRuleSpec"];
      status?: Record<string, never>;
    };
    DestinationRuleSpec: {
      host?: string;
      subsets?: components["schemas"]["Subset"][];
    };
    Subset: {
      name?: string;
      /**
       * @example {
       *   "version": "prod"
       * }
       */
      labels?: {
        [key: string]: string;
      };
    };
    Gateway: {
      /** @example Gateway */
      kind?: string;
      /** @example networking.istio.io/v1alpha3 */
      api_version?: string;
      metadata?: components["schemas"]["Metadata"];
      spec?: components["schemas"]["GatewaySpec"];
      status?: Record<string, never>;
    };
    GatewaySpec: {
      servers?: components["schemas"]["Server"][];
      selector?: {
        istio?: string;
      };
    };
    Server: {
      port?: components["schemas"]["ServerPort"];
      hosts?: string[];
    };
  };
  responses: {
    /** @description Unexpected error */
    NotOk: {
      content: {
        "application/json": components["schemas"]["ResponseInfo"];
      };
    };
  };
  parameters: {
    /** @description the resource ID */
    identifier: string;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
