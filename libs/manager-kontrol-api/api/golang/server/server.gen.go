// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version 2.1.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	. "github.com/kurtosis-tech/kardinal/libs/manager-kontrol-api/api/golang/types"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Cluster resource definition
	// (GET /cluster-resources/{identifier})
	GetClusterResourcesIdentifier(ctx echo.Context, identifier Identifier) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetClusterResourcesIdentifier converts echo context to params.
func (w *ServerInterfaceWrapper) GetClusterResourcesIdentifier(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "identifier" -------------
	var identifier Identifier

	err = runtime.BindStyledParameterWithOptions("simple", "identifier", ctx.Param("identifier"), &identifier, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter identifier: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetClusterResourcesIdentifier(ctx, identifier)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/cluster-resources/:identifier", wrapper.GetClusterResourcesIdentifier)

}

type NotOkJSONResponse ResponseInfo

type GetClusterResourcesIdentifierRequestObject struct {
	Identifier Identifier `json:"identifier"`
}

type GetClusterResourcesIdentifierResponseObject interface {
	VisitGetClusterResourcesIdentifierResponse(w http.ResponseWriter) error
}

type GetClusterResourcesIdentifier200JSONResponse ClusterResources

func (response GetClusterResourcesIdentifier200JSONResponse) VisitGetClusterResourcesIdentifierResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetClusterResourcesIdentifierdefaultJSONResponse struct {
	Body       ResponseInfo
	StatusCode int
}

func (response GetClusterResourcesIdentifierdefaultJSONResponse) VisitGetClusterResourcesIdentifierResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Cluster resource definition
	// (GET /cluster-resources/{identifier})
	GetClusterResourcesIdentifier(ctx context.Context, request GetClusterResourcesIdentifierRequestObject) (GetClusterResourcesIdentifierResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetClusterResourcesIdentifier operation middleware
func (sh *strictHandler) GetClusterResourcesIdentifier(ctx echo.Context, identifier Identifier) error {
	var request GetClusterResourcesIdentifierRequestObject

	request.Identifier = identifier

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetClusterResourcesIdentifier(ctx.Request().Context(), request.(GetClusterResourcesIdentifierRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetClusterResourcesIdentifier")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetClusterResourcesIdentifierResponseObject); ok {
		return validResponse.VisitGetClusterResourcesIdentifierResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xVwW7bOBD9FWN2j7JpJ5eFbsFmNzCCdRZO2h6CIGCpscxYItnhyIlh6N8LipLlJLab",
	"Q9uTJc3j45s35uMWlC2dNWjYQ7oFJ0mWyEjNm87QsF5opPCWoVekHWtrIAVe4oDQ24oUDqaXkIAOn53k",
	"JSRgZImQ7hMkQPit0oQZpEwVJuDVEksZmHnjAtozaZNDXdcB7J01HhsdM8s3q/CgrGE0HB6lc4VWMqgR",
	"Tz5I2u4x/km4gBT+EH17Ila9mLfUU7OwcbPXnX0y+OJQMWYDJLIEAdIuDtx/F5VnpHnbfPSNrENiHd8y",
	"dIXdlJ2pmrFsHl6GuR22zUrn/HoyutxBIenrQ106S02frZMRDkk0OIXVX36krZBOi1AS60kjsyMnkhuI",
	"nbE2jUuPVBV4XM96Igu3lOejy37JvCrwtKxuVS9Me9Y2SFOFRsPD3Aq3yoNQLwzys6WVNrnYLTykOpeM",
	"z3JzVOJVW/8N0jzSWqsTvilLuJ6MbiPutKSIPTjEUDo2xLUmrmTx+EMtO4M+xxUfEvUrRth/sF+fUHHo",
	"4tWxe3dklM0w/C4slZIhhUobPj+DHZE2jDlSYCrRe5njgeTo0B8LgLuAjWHTJdN9JOj3SKKyhxMN3bVb",
	"oqnKwPDPfH4zhwSms39vIIEvF/PZdHa1R7Gfc7p1gzUXofafNDJHEteFrbLhtTVMthhc/D+FBNZIPkbU",
	"ZDQejYMG69BIpyGF8+ZTnGHjqFAxp4ZdSnux7fO4DpAcmz9CmENz3qcZpHCF/Dbhpvsxvn9F3B82uoeI",
	"vRugfngT62fj8U8L9XehfCDYbyul0PtFVQw6HTEjF7Iq+NgOO8kiXkNNKlRlKWkDaXcZ9FdhhgttdLNj",
	"Aizz4BK8GwU81HVdfw8AAP//Zq1BA34HAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
